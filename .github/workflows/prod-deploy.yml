name: PROD Deploy (Blue/Green)

on:
  repository_dispatch:
    types: [trigger-prod-deploy]
  workflow_dispatch:

jobs:
  deploy-to-prod:
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY: 949882743811.dkr.ecr.us-east-1.amazonaws.com
      AWS_REGION: us-east-1
      CLUSTER_NAME: final-devops-cluster
      NAMESPACE: prod

    steps:
    - name: Checkout Infra Repo
      uses: actions/checkout@v3

    - name: Checkout Source Repo
      uses: actions/checkout@v3
      with:
        repository: dingjunyu888/final-devops-project
        token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
        path: source

    - name: Parse Release Title
      id: parse
      run: |
        TITLE="${{ github.event.client_payload.release_title }}"
        echo "Release Title: $TITLE"

        if [[ "$TITLE" =~ ^user-service-ga-.*$ ]]; then
          echo "service=user-service" >> $GITHUB_OUTPUT
          echo "context=source/backend/user-service" >> $GITHUB_OUTPUT
          TAG=$(echo "$TITLE" | cut -d'-' -f3-)
        elif [[ "$TITLE" =~ ^product-service-ga-.*$ ]]; then
          echo "service=product-service" >> $GITHUB_OUTPUT
          echo "context=source/backend/product-service" >> $GITHUB_OUTPUT
          TAG=$(echo "$TITLE" | cut -d'-' -f3-)
        elif [[ "$TITLE" =~ ^order-service-ga-.*$ ]]; then
          echo "service=order-service" >> $GITHUB_OUTPUT
          echo "context=source/backend/order-service" >> $GITHUB_OUTPUT
          TAG=$(echo "$TITLE" | cut -d'-' -f3-)
        elif [[ "$TITLE" =~ ^frontend-ga-.*$ ]]; then
          echo "service=frontend" >> $GITHUB_OUTPUT
          echo "context=source/frontend" >> $GITHUB_OUTPUT
          TAG=$(echo "$TITLE" | cut -d'-' -f2-)
        else
          echo "‚ùå Unknown or missing service in release title."
          exit 78
        fi

        echo "tag=$TAG" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region $AWS_REGION | \
        docker login --username AWS --password-stdin $ECR_REGISTRY

    - name: Build and Push Docker Image
      run: |
        SERVICE=${{ steps.parse.outputs.service }}
        CONTEXT=${{ steps.parse.outputs.context }}
        TAG=${{ steps.parse.outputs.tag }}
        IMAGE=$ECR_REGISTRY/$SERVICE:$TAG

        echo "üì¶ Building $SERVICE with tag $TAG"
        docker build -t $IMAGE --platform linux/amd64 $CONTEXT
        docker push $IMAGE

    - name: Update Kubeconfig
      run: aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

    - name: Deploy to Green
      run: |
        SERVICE=${{ steps.parse.outputs.service }}
        TAG=${{ steps.parse.outputs.tag }}
        IMAGE=$ECR_REGISTRY/$SERVICE:$TAG

        echo "üü¢ Deploying green version of $SERVICE with $IMAGE"
        kubectl set image deployment/${SERVICE}-green $SERVICE=$IMAGE -n $NAMESPACE

    - name: Wait for Green to be Ready
      run: |
        SERVICE=${{ steps.parse.outputs.service }}
        echo "‚è≥ Waiting for ${SERVICE}-green pods to be ready..."
        kubectl rollout status deployment/${SERVICE}-green -n $NAMESPACE

    - name: Switch LoadBalancer to Green
      run: |
        SERVICE=${{ steps.parse.outputs.service }}
        echo "üîÅ Switching service to point to green deployment"
        kubectl patch service $SERVICE -n $NAMESPACE \
          -p '{"spec":{"selector":{"app":"'"$SERVICE"'","version":"green"}}}'

    - name: üßº Cleanup Blue
      run: |
        SERVICE=${{ steps.parse.outputs.service }}
        echo "üóëÔ∏è Scaling down blue deployment"
        kubectl scale deployment/${SERVICE}-blue --replicas=0 -n $NAMESPACE
