name: PROD Deploy (Blue/Green)

on:
  repository_dispatch:
    types: [trigger-prod-deploy]
  workflow_dispatch:

jobs:
  deploy-to-prod:
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY: 949882743811.dkr.ecr.us-east-1.amazonaws.com
      AWS_REGION: us-east-1

    steps:
    - name: Checkout infra repo
      uses: actions/checkout@v3

    - name: Checkout source repo
      uses: actions/checkout@v3
      with:
        repository: dingjunyu888/final-devops-project
        token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
        path: source

    - name: Parse release title
      id: parse
      run: |
        TITLE="${{ github.event.client_payload.release_title }}"
        echo "Release title: $TITLE"

        if [[ "$TITLE" =~ ^user-service-ga-.*$ ]]; then
          echo "service=user-service" >> $GITHUB_OUTPUT
          echo "context=source/backend/user-service" >> $GITHUB_OUTPUT
          TAG=$(echo "$TITLE" | cut -d'-' -f3-)
        elif [[ "$TITLE" =~ ^product-service-ga-.*$ ]]; then
          echo "service=product-service" >> $GITHUB_OUTPUT
          echo "context=source/backend/product-service" >> $GITHUB_OUTPUT
          TAG=$(echo "$TITLE" | cut -d'-' -f3-)
        elif [[ "$TITLE" =~ ^order-service-ga-.*$ ]]; then
          echo "service=order-service" >> $GITHUB_OUTPUT
          echo "context=source/backend/order-service" >> $GITHUB_OUTPUT
          TAG=$(echo "$TITLE" | cut -d'-' -f3-)
        elif [[ "$TITLE" =~ ^frontend-ga-.*$ ]]; then
          echo "service=frontend" >> $GITHUB_OUTPUT
          echo "context=source/frontend" >> $GITHUB_OUTPUT
          TAG=$(echo "$TITLE" | cut -d'-' -f2-)
        else
          echo "‚ùå Unknown or invalid service tag"
          exit 78
        fi

        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Extracted tag: $TAG"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region $AWS_REGION | \
        docker login --username AWS --password-stdin $ECR_REGISTRY

    - name: Build and push Docker image for PROD
      run: |
        SERVICE=${{ steps.parse.outputs.service }}
        CONTEXT=${{ steps.parse.outputs.context }}
        TAG=${{ steps.parse.outputs.tag }}
        IMAGE=$ECR_REGISTRY/$SERVICE:$TAG

        echo "üì¶ Building and pushing $IMAGE"
        docker build -t $IMAGE --platform linux/amd64 $CONTEXT
        docker push $IMAGE

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region $AWS_REGION --name final-devops-cluster

    - name: Determine active color in PROD
      id: active-color
      run: |
        SERVICE=${{ steps.parse.outputs.service }}
        ACTIVE_COLOR=$(kubectl get svc $SERVICE -n prod -o jsonpath='{.spec.selector.version}')
        echo "üé® Active color is: $ACTIVE_COLOR"

        if [[ "$ACTIVE_COLOR" == "blue" ]]; then
          NEXT_COLOR="green"
        else
          NEXT_COLOR="blue"
        fi

        echo "next_color=$NEXT_COLOR" >> $GITHUB_OUTPUT
        echo "üí° Will deploy to: $NEXT_COLOR"

    - name: Update Deployment image for ${{ steps.parse.outputs.service }}
      run: |
        SERVICE=${{ steps.parse.outputs.service }}
        TAG=${{ steps.parse.outputs.tag }}
        COLOR=${{ steps.active-color.outputs.next_color }}
        IMAGE=$ECR_REGISTRY/$SERVICE:$TAG

        echo "üöÄ Updating deployment: $SERVICE-$COLOR with image: $IMAGE"
        kubectl set image deployment/$SERVICE-$COLOR $SERVICE=$IMAGE -n prod

    - name: Wait for deployment rollout
      run: |
        SERVICE=${{ steps.parse.outputs.service }}
        COLOR=${{ steps.active-color.outputs.next_color }}

        echo "‚è≥ Waiting for deployment rollout..."
        kubectl rollout status deployment/$SERVICE-$COLOR -n prod

    - name: Switch service selector to ${{ steps.active-color.outputs.next_color }}
      run: |
        SERVICE=${{ steps.parse.outputs.service }}
        COLOR=${{ steps.active-color.outputs.next_color }}
        echo "üîÅ Switching $SERVICE service to point to version=$COLOR"

        kubectl patch svc $SERVICE -n prod \
          -p "{\"spec\": {\"selector\": {\"app\": \"$SERVICE\", \"version\": \"$COLOR\"}}}"
