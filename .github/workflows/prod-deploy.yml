name: PROD Deploy

on:
  repository_dispatch:
    types: [trigger-prod-deploy]
  workflow_dispatch:

jobs:
  deploy-to-prod:
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY: 949882743811.dkr.ecr.us-east-1.amazonaws.com
      AWS_REGION: us-east-1

    steps:
    - name: Checkout infra repo
      uses: actions/checkout@v3

    - name: Checkout source repo
      uses: actions/checkout@v3
      with:
        repository: dingjunyu888/final-devops-project
        token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
        path: source

    - name: Parse release title
      id: parse
      run: |
        TITLE="${{ github.event.client_payload.release_title }}"
        echo "Release title: $TITLE"

        if [[ "$TITLE" =~ ^user-service-ga-.*$ ]]; then
          echo "service=user-service" >> $GITHUB_OUTPUT
          echo "context=source/backend/user-service" >> $GITHUB_OUTPUT
          TAG=$(echo "$TITLE" | cut -d'-' -f3-)
        elif [[ "$TITLE" =~ ^product-service-ga-.*$ ]]; then
          echo "service=product-service" >> $GITHUB_OUTPUT
          echo "context=source/backend/product-service" >> $GITHUB_OUTPUT
          TAG=$(echo "$TITLE" | cut -d'-' -f3-)
        elif [[ "$TITLE" =~ ^order-service-ga-.*$ ]]; then
          echo "service=order-service" >> $GITHUB_OUTPUT
          echo "context=source/backend/order-service" >> $GITHUB_OUTPUT
          TAG=$(echo "$TITLE" | cut -d'-' -f3-)
        elif [[ "$TITLE" =~ ^frontend-ga-.*$ ]]; then
          echo "service=frontend" >> $GITHUB_OUTPUT
          echo "context=source/frontend" >> $GITHUB_OUTPUT
          TAG=$(echo "$TITLE" | cut -d'-' -f2-)
        else
          echo "‚ùå Unknown or missing service in release title."
          exit 78
        fi

        echo "tag=$TAG" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region $AWS_REGION | \
        docker login --username AWS --password-stdin $ECR_REGISTRY

    - name: Build and push Docker image
      run: |
        SERVICE=${{ steps.parse.outputs.service }}
        CONTEXT=${{ steps.parse.outputs.context }}
        TAG=${{ steps.parse.outputs.tag }}
        IMAGE=$ECR_REGISTRY/$SERVICE:$TAG

        echo "üì¶ Building and pushing $IMAGE"
        docker build -t $IMAGE --platform linux/amd64 $CONTEXT
        docker push $IMAGE

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region $AWS_REGION --name final-devops-cluster

    - name: Detect current live color
      id: color
      run: |
        SERVICE=${{ steps.parse.outputs.service }}

        CURRENT_SELECTOR=$(kubectl get svc $SERVICE -n prod -o jsonpath='{.spec.selector.version}')
        if [ "$CURRENT_SELECTOR" = "blue" ]; then
          NEW_COLOR="green"
        else
          NEW_COLOR="blue"
        fi
        echo "üîÅ Switching $SERVICE to $NEW_COLOR"
        echo "new_color=$NEW_COLOR" >> $GITHUB_OUTPUT

    - name: Apply deployment if missing
      run: |
        SERVICE=${{ steps.parse.outputs.service }}
        NEW_COLOR=${{ steps.color.outputs.new_color }}
        FILE="k8s/prod/$SERVICE-$NEW_COLOR.yaml"

        echo "üìÑ Checking if $SERVICE-$NEW_COLOR deployment exists..."
        if ! kubectl get deployment $SERVICE-$NEW_COLOR -n prod >/dev/null 2>&1; then
          echo "‚ö†Ô∏è Deployment $SERVICE-$NEW_COLOR not found. Applying YAML..."
          kubectl apply -f $FILE
        else
          echo "‚úÖ Deployment already exists."
        fi

    - name: Set image for new deployment
      run: |
        SERVICE=${{ steps.parse.outputs.service }}
        TAG=${{ steps.parse.outputs.tag }}
        NEW_COLOR=${{ steps.color.outputs.new_color }}
        IMAGE=$ECR_REGISTRY/$SERVICE:$TAG

        echo "üì¶ Deploying $SERVICE-$NEW_COLOR with image: $IMAGE"
        kubectl set image deployment/$SERVICE-$NEW_COLOR $SERVICE=$IMAGE -n prod

    - name: Wait for rollout to complete
      run: |
        SERVICE=${{ steps.parse.outputs.service }}
        NEW_COLOR=${{ steps.color.outputs.new_color }}
        echo "‚è≥ Waiting for $SERVICE-$NEW_COLOR rollout..."
        kubectl rollout status deployment/$SERVICE-$NEW_COLOR -n prod

    - name: Update service selector
      run: |
        SERVICE=${{ steps.parse.outputs.service }}
        NEW_COLOR=${{ steps.color.outputs.new_color }}
        echo "üîÄ Updating selector to $NEW_COLOR"
        kubectl patch service $SERVICE -n prod -p \
          "{\"spec\": {\"selector\": {\"app\": \"$SERVICE\", \"version\": \"$NEW_COLOR\"}}}"

    - name: Cleanup old deployment only if rollout succeeded
      if: success()
      run: |
        SERVICE=${{ steps.parse.outputs.service }}
        NEW_COLOR=${{ steps.color.outputs.new_color }}
        OLD_COLOR="blue"
        if [ "$NEW_COLOR" = "blue" ]; then
          OLD_COLOR="green"
        fi

        echo "üßπ Deleting old deployment: $SERVICE-$OLD_COLOR"
        kubectl delete deployment $SERVICE-$OLD_COLOR -n prod || true
