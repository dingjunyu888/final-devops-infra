name: QA Deploy

on:
  schedule:
    - cron: '0 9 * * *'  # 2AM PDT
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  detect-and-deploy:
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY: 949882743811.dkr.ecr.us-east-1.amazonaws.com
      AWS_REGION: us-east-1

    steps:
    - name: Checkout infra repo
      uses: actions/checkout@v3

    - name: Checkout source repo
      uses: actions/checkout@v3
      with:
        repository: dingjunyu888/final-devops-project
        token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
        path: source

    - name: Extract commit message from source repo
      id: commit
      run: |
        cd source
        echo "msg=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT

    - name: Detect which service changed
      id: detect
      run: |
        msg="${{ steps.commit.outputs.msg }}"
        echo "Detected commit: $msg"

        if [[ "$msg" == user-service:* ]]; then
          echo "service=user-service" >> $GITHUB_OUTPUT
          echo "context=source/backend/user-service" >> $GITHUB_OUTPUT
        elif [[ "$msg" == product-service:* ]]; then
          echo "service=product-service" >> $GITHUB_OUTPUT
          echo "context=source/backend/product-service" >> $GITHUB_OUTPUT
        elif [[ "$msg" == order-service:* ]]; then
          echo "service=order-service" >> $GITHUB_OUTPUT
          echo "context=source/backend/order-service" >> $GITHUB_OUTPUT
        elif [[ "$msg" == frontend:* ]]; then
          echo "service=frontend" >> $GITHUB_OUTPUT
          echo "context=source/frontend" >> $GITHUB_OUTPUT
        else
          echo "❌ No target service detected. Skipping."
          exit 78
        fi

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Simulate Start EC2 for Testing
      run: |
        echo "🟢 Launching temporary EC2 instance..."
        echo "Fake EC2 instance ID: i-0faketest12345678"
        echo "INSTANCE_ID=i-0faketest12345678" >> $GITHUB_ENV

    - name: Simulate Wait for EC2 to be Running
      run: |
        echo "🔄 Waiting for instance i-0faketest12345678 to enter 'running' state..."
        sleep 3
        echo "✅ Instance is now running."

    - name: Simulate EC2 Status Checks
      run: |
        echo "🔎 Waiting for EC2 instance status checks..."
        sleep 2
        echo "✅ Status checks passed."

    - name: Simulate SSH Access and Setup
      run: |
        echo "🔐 SSH into EC2 and install docker, git..."
        echo "Simulating: sudo yum install docker git"
        sleep 1
        echo "✅ Setup complete."

    - name: Simulate Smoke Test
      run: |
        echo "🚀 Running smoke test for ${{ steps.detect.outputs.service }}..."
        echo "Checking health at http://fake-ec2-ip:PORT/health"
        echo "✅ Smoke test passed."

    - name: Login to ECR
      run: |
        echo "🔑 Logging into Amazon ECR..."
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

    - name: Build and Push Docker Image to ECR
      run: |
        SERVICE=${{ steps.detect.outputs.service }}
        CONTEXT=${{ steps.detect.outputs.context }}
        IMAGE=$ECR_REGISTRY/$SERVICE:qa-latest

        echo "📦 Building $IMAGE from $CONTEXT"
        echo "👉 docker build -t $IMAGE $CONTEXT"
        echo "👉 docker push $IMAGE"
        echo "✅ Build and push simulated."
