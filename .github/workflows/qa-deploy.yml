name: QA Deploy

on:
  schedule:
    - cron: '0 9 * * *' # 2AM PDT every day
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  detect-and-test:
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY: 949882743811.dkr.ecr.us-east-1.amazonaws.com
      AWS_REGION: us-east-1

    steps:
    - name: Checkout infra repo
      uses: actions/checkout@v3

    - name: Checkout source repo
      uses: actions/checkout@v3
      with:
        repository: dingjunyu888/final-devops-project
        token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
        path: source

    - name: Extract commit message from source repo
      id: commit
      run: |
        cd source
        echo "msg=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT

    - name: Detect which service changed
      id: detect
      run: |
        msg="${{ steps.commit.outputs.msg }}"
        echo "Detected commit: $msg"

        if [[ "$msg" == user-service:* ]]; then
          echo "service=user-service" >> $GITHUB_OUTPUT
          echo "context=source/backend/user-service" >> $GITHUB_OUTPUT
        elif [[ "$msg" == product-service:* ]]; then
          echo "service=product-service" >> $GITHUB_OUTPUT
          echo "context=source/backend/product-service" >> $GITHUB_OUTPUT
        elif [[ "$msg" == order-service:* ]]; then
          echo "service=order-service" >> $GITHUB_OUTPUT
          echo "context=source/backend/order-service" >> $GITHUB_OUTPUT
        elif [[ "$msg" == frontend:* ]]; then
          echo "service=frontend" >> $GITHUB_OUTPUT
          echo "context=source/frontend" >> $GITHUB_OUTPUT
        else
          echo "❌ No target service detected. Skipping."
          exit 78
        fi

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region $AWS_REGION | \
        docker login --username AWS --password-stdin $ECR_REGISTRY

    - name: Build and push image to ECR (qa-latest)
      run: |
        SERVICE=${{ steps.detect.outputs.service }}
        CONTEXT=${{ steps.detect.outputs.context }}
        IMAGE=$ECR_REGISTRY/$SERVICE:qa-latest

        echo "📦 Building and pushing $IMAGE from $CONTEXT"
        docker build -t $IMAGE --platform linux/amd64 $CONTEXT
        docker push $IMAGE

    # 🧪 Simulated QA Integration Steps

    - name: Simulate Start EC2 for QA Testing
      run: |
        echo "🖥️ Starting temporary EC2 instance for QA testing..."
        echo "Simulated EC2 instance ID: i-0abc123fake"

    - name: Simulate Wait for EC2 to be Running
      run: |
        echo "⏳ Waiting for EC2 to enter running state..."
        sleep 5
        echo "✅ EC2 is now running."

    - name: Simulate SSH and Docker Compose Setup
      run: |
        echo "🔐 SSH into EC2 and prepare Docker environment..."
        echo "✔️ Docker and Docker Compose are installed."

    - name: Simulate Smoke Test
      run: |
        echo "🚦 Running smoke test..."
        echo "✔️ Service responded with HTTP 200."
        echo "✔️ Health check passed."

    - name: Simulate Integration Test
      run: |
        echo "🔁 Running integration test..."
        echo "✔️ Created mock resource in QA DB."
        echo "✔️ Verified GET and POST requests."
        echo "✔️ All integration tests passed."

    - name: Simulate QA Deployment
      run: |
        echo "🚀 Deploying service to QA machine (simulated)..."
        echo "✔️ Service deployed using image: $ECR_REGISTRY/${{ steps.detect.outputs.service }}:qa-latest"
