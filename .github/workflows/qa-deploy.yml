name: QA Deploy

on:
  schedule:
    - cron: '0 9 * * *'  # Runs daily at 2AM PDT
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  detect-and-test:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      ECR_REGISTRY: 949882743811.dkr.ecr.us-east-1.amazonaws.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Extract commit message
      id: commit
      run: echo "msg=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT

    - name: Detect service change
      id: detect
      run: |
        msg="${{ steps.commit.outputs.msg }}"
        echo "Commit Message: $msg"
        if [[ "$msg" == user-service:* ]]; then
          echo "service=user-service" >> $GITHUB_OUTPUT
          echo "port=3001" >> $GITHUB_OUTPUT
        elif [[ "$msg" == product-service:* ]]; then
          echo "service=product-service" >> $GITHUB_OUTPUT
          echo "port=3002" >> $GITHUB_OUTPUT
        elif [[ "$msg" == order-service:* ]]; then
          echo "service=order-service" >> $GITHUB_OUTPUT
          echo "port=3003" >> $GITHUB_OUTPUT
        elif [[ "$msg" == frontend:* ]]; then
          echo "service=frontend" >> $GITHUB_OUTPUT
          echo "port=5173" >> $GITHUB_OUTPUT
        else
          echo "‚ùå No target service detected. Skipping."
          exit 78  # GitHub neutral skip
        fi

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to ECR
      run: |
        aws ecr get-login-password --region $AWS_REGION | \
        docker login --username AWS --password-stdin $ECR_REGISTRY

    - name: Build and push Docker image to ECR
      run: |
        SERVICE=${{ steps.detect.outputs.service }}
        IMAGE="$ECR_REGISTRY/$SERVICE:qa-latest"
        echo "üì¶ Building image for $SERVICE"
        docker build -t $IMAGE --platform linux/amd64 ./$SERVICE
        docker push $IMAGE
        echo "IMAGE=$IMAGE" >> $GITHUB_ENV

    - name: Simulate Smoke Test via curl on EC2 (fake)
      run: |
        echo "üîç Pretending to SSH into a QA EC2..."
        echo "curl http://fake-qa-ec2/$SERVICE/health"
        echo "‚úÖ $SERVICE QA smoke test simulated successfully."

    - name: ‚úÖ Done
      run: echo "$SERVICE successfully built and fake-tested."
