name: QA Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  detect-and-test:
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY: 949882743811.dkr.ecr.us-east-1.amazonaws.com
      AWS_REGION: us-east-1

    steps:
    # ----------------------- Fake QA Env Setup -----------------------
    - name: Start EC2 Instance 
      run: |
        echo "üñ•Ô∏è Launching temporary EC2 instance for QA..."
        sleep 3
        echo "INSTANCE_ID=i-0abc123456fake" >> $GITHUB_ENV
        echo "::set-output name=instance_id::i-0abc123456fake"
        echo "‚úîÔ∏è EC2 instance launched: i-0abc123456fake"

    - name: Wait for EC2 to be Running
      run: |
        echo "‚è≥ Waiting for EC2 to be in 'running' state..."
        sleep 6
        echo "‚úÖ EC2 is now running."

    - name: Get EC2 Public IP 
      id: get-ip
      run: |
        echo "PUBLIC_IP=3.91.211.101" >> $GITHUB_ENV
        echo "::set-output name=public_ip::3.91.211.101"
        echo "‚úîÔ∏è EC2 public IP acquired: 3.91.211.101"

    - name: Wait for EC2 Status Checks 
      run: |
        echo "üîç Waiting for EC2 status checks..."
        sleep 8
        echo "‚úÖ EC2 instance passed status checks."

    - name: Set up SSH Key
      run: |
        echo "üîê Setting up SSH access..."
        mkdir -p ~/.ssh
        echo "FAKE_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        echo "fake-host ssh-rsa AAAA...12345" >> ~/.ssh/known_hosts
        echo "‚úîÔ∏è SSH ready for fake-host"

    - name: Access EC2 and Install Docker
      run: |
        echo "üîß Installing Docker and dependencies on EC2..."
        sleep 5
        echo "[ec2-user@i-0abc123456fake] Docker version 20.10.14"
        echo "‚úîÔ∏è Docker installed and running."

    - name: Run Smoke Test 
      run: |
        echo "üö¶ Running smoke test: curl http://3.91.211.101:8080/health"
        sleep 2
        echo "HTTP/1.1 200 OK"
        echo "‚úîÔ∏è Smoke test passed."

    # ----------------------- Real Build & Push -----------------------
    - name: Checkout infra repo
      uses: actions/checkout@v3

    - name: Checkout source repo
      uses: actions/checkout@v3
      with:
        repository: dingjunyu888/final-devops-project
        token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
        path: source

    - name: Extract commit message
      id: commit
      run: |
        cd source
        echo "msg=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT

    - name: Detect which service changed
      id: detect
      run: |
        msg="${{ steps.commit.outputs.msg }}"
        echo "Detected commit: $msg"

        if [[ "$msg" == user-service:* ]]; then
          echo "service=user-service" >> $GITHUB_OUTPUT
          echo "context=source/backend/user-service" >> $GITHUB_OUTPUT
        elif [[ "$msg" == product-service:* ]]; then
          echo "service=product-service" >> $GITHUB_OUTPUT
          echo "context=source/backend/product-service" >> $GITHUB_OUTPUT
        elif [[ "$msg" == order-service:* ]]; then
          echo "service=order-service" >> $GITHUB_OUTPUT
          echo "context=source/backend/order-service" >> $GITHUB_OUTPUT
        elif [[ "$msg" == frontend:* ]]; then
          echo "service=frontend" >> $GITHUB_OUTPUT
          echo "context=source/frontend" >> $GITHUB_OUTPUT
        else
          echo "‚ùå No target service detected. Skipping."
          exit 78
        fi

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region $AWS_REGION | \
        docker login --username AWS --password-stdin $ECR_REGISTRY

    - name: Build and Push Docker Image to ECR (qa-latest)
      run: |
        SERVICE=${{ steps.detect.outputs.service }}
        CONTEXT=${{ steps.detect.outputs.context }}
        IMAGE=$ECR_REGISTRY/$SERVICE:qa-latest

        echo "üì¶ Building Docker image from $CONTEXT"
        docker build -t $IMAGE --platform linux/amd64 $CONTEXT
        echo "üì§ Pushing Docker image to ECR: $IMAGE"
        docker push $IMAGE
        echo "‚úîÔ∏è Image pushed successfully."

    # ----------------------- Fake Deployment to QA -----------------------
    - name: Pull Image from ECR on EC2 
      run: |
        SERVICE=${{ steps.detect.outputs.service }}
        echo "[ec2-user@3.91.211.101]$ docker pull $ECR_REGISTRY/$SERVICE:qa-latest"
        sleep 2
        echo "‚úîÔ∏è Pulled image: $ECR_REGISTRY/$SERVICE:qa-latest"

    - name: Stop & Remove Existing Container 
      run: |
        SERVICE=${{ steps.detect.outputs.service }}
        echo "[ec2-user@3.91.211.101]$ docker stop $SERVICE || true"
        echo "[ec2-user@3.91.211.101]$ docker rm $SERVICE || true"
        echo "‚úîÔ∏è Old container cleaned up."

    - name: Run Docker Container 
      run: |
        SERVICE=${{ steps.detect.outputs.service }}
        PORT=8080
        if [[ "$SERVICE" == "frontend" ]]; then PORT=5173; fi
        echo "[ec2-user@3.91.211.101]$ docker run -d --name $SERVICE -p $PORT:$PORT $ECR_REGISTRY/$SERVICE:qa-latest"
        sleep 3
        echo "‚úîÔ∏è Container $SERVICE is running on EC2: http://3.91.211.101:$PORT"
