name: QA Deploy

on:
  workflow_dispatch:
  schedule:
    - cron: '0 9 * * *'  # 2 AM PDT

jobs:
  detect-and-build:
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY: 949882743811.dkr.ecr.us-east-1.amazonaws.com
      AWS_REGION: us-east-1
      SOURCE_REPO: dingjunyu888/final-devops-project

    steps:
    - name: Checkout infra repo
      uses: actions/checkout@v3

    - name: Checkout source repo
      uses: actions/checkout@v3
      with:
        repository: ${{ env.SOURCE_REPO }}
        token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
        path: source

    - name: Detect changed service
      id: detect
      working-directory: source
      run: |
        git fetch origin main
        git diff --name-only origin/main HEAD > changed.txt || true
        cat changed.txt

        if grep -q '^backend/user-service/' changed.txt; then
          echo "service=user-service" >> $GITHUB_OUTPUT
          echo "path=backend/user-service" >> $GITHUB_OUTPUT
        elif grep -q '^backend/product-service/' changed.txt; then
          echo "service=product-service" >> $GITHUB_OUTPUT
          echo "path=backend/product-service" >> $GITHUB_OUTPUT
        elif grep -q '^backend/order-service/' changed.txt; then
          echo "service=order-service" >> $GITHUB_OUTPUT
          echo "path=backend/order-service" >> $GITHUB_OUTPUT
        elif grep -q '^frontend/' changed.txt; then
          echo "service=frontend" >> $GITHUB_OUTPUT
          echo "path=frontend" >> $GITHUB_OUTPUT
        else
          echo "‚ùå No target service detected. Skipping."
          exit 78
        fi

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin $ECR_REGISTRY

    - name: Build and Push Docker image
      run: |
        SERVICE=${{ steps.detect.outputs.service }}
        PATH_TO_SERVICE=${{ steps.detect.outputs.path }}
        IMAGE="$ECR_REGISTRY/$SERVICE:qa-latest"

        echo "üì¶ Building $SERVICE from $PATH_TO_SERVICE"
        docker build -t $IMAGE --platform linux/amd64 ./source/$PATH_TO_SERVICE
        docker push $IMAGE
